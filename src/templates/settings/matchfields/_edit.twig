{% extends "cockpit/_layouts/cockpit-cp" %}
{% set title = matchField.id ? matchField.name : 'Create a new match field'|t('cockpit') %}

{% set crumbs = [
    { label: 'Cockpit'|t('cockpit'), url: url('cockpit') },
    { label: 'Settings'|t('cockpit'), url: url('cockpit/settings'), ariaLabel: 'Cockpit Settings'|t('cockpit') },
    { label: "Matchfield Types"|t('cockpit'), url: url('cockpit/settings/matchfield') },
] %}

{% set selectedSubnavItem = 'settings' %}
{% set fullPageForm = not readOnly %}

{% if readOnly %}
    {% set contentNotice = readOnlyNotice() %}
{% endif %}

{% import "_includes/forms" as forms %}
{% set headlessMode = craft.app.config.general.headlessMode %}

{% set formActions = [
    {
        label: 'Save and continue editing'|t('app'),
        redirect: 'cockpit/settings/matchfield/{id}'|hash,
        shortcut: true,
        retainScroll: true,
    },
] %}

{% block content %}

    {% if not readOnly %}
        {{ actionInput('cockpit/match-fields/save-match-field') }}
        {{ redirectInput('cockpit/settings/matchfields') }}

        {% if matchField.id %}{{ hiddenInput('matchFieldId', matchField.id) }}{% endif %}
    {% endif %}

    <div id="matchfield-settings">
        {{ forms.textField({
            first: true,
            label: "Name"|t('cockpit'),
            instructions: "What this match field will be called in the control panel."|t('cockpit'),
            id: 'name',
            name: 'name',
            value: matchField.name,
            errors: matchField.getErrors('name'),
            autofocus: true,
            required: true,
            disabled: readOnly,
        }) }}

        {{ forms.textField({
            label: "Handle"|t('cockpit'),
            instructions: "How you’ll refer to this match field type in the templates."|t('cockpit'),
            id: 'handle',
            class: 'code',
            name: 'handle',
            value: matchField.handle,
            errors: matchField.getErrors('handle'),
            required: true,
            disabled: readOnly,
        }) }}

        {{ forms.lightswitchField({
            label: 'Enable versioning for this match field.'|t('cockpit'),
            id: 'enableVersioning',
            name: 'enableVersioning',
            on: matchField.enableVersioning,
            disabled: readOnly,
        }) }}

        {{ forms.selectField({
            label: "Matchfield Type"|t('app'),
            instructions: "What type of match field is this?"|t('cockpit'),
            warning: 'Changing this may result in data loss.'|t('cockpit'),
            id: 'type',
            name: 'type',
            options: typeOptions,
            value: matchField.type,
            toggle: true,
            targetPrefix: '.type-',
            errors: matchField.getErrors('type'),
            disabled: readOnly,
        }) }}

        <hr>

        {% set siteRows = [] %}
        {% set siteErrors = matchField.getErrors('siteSettings') %}

        {% for site in craft.app.sites.getAllSites() %}
            {% set siteSettings = matchField.siteSettings[site.id] ?? null %}
            {% if siteSettings %}
                {% for attribute, errors in siteSettings.getErrors() %}
                    {% set siteErrors = siteErrors|merge(errors) %}
                {% endfor %}
            {% endif %}
            {% set siteRows = siteRows|merge({
                (site.handle): {
                    heading: site.name|t('site')|e,
                    enabled: include('_includes/forms/lightswitch.twig', {
                        name: 'sites['~site.handle~'][enabled]',
                        on: brandNewMatchField or siteSettings,
                        value: site.id,
                        small: true,
                        disabled: readOnly,
                    }),
                    uriFormat: {
                        value: siteSettings ? siteSettings.uriFormat,
                        hasErrors: siteSettings ? siteSettings.hasErrors('uriFormat'),
                    },
                    template: not headlessMode ? {
                        value: siteSettings ? siteSettings.template,
                        hasErrors: siteSettings ? siteSettings.hasErrors('template'),
                    },
                    enabledByDefault: siteSettings ? siteSettings.enabledByDefault : true,
                }|filter
            }) %}
        {% endfor %}

        {{ forms.editableTableField({
            label: "Site Settings"|t('app'),
            instructions: "Choose which sites this match field should be available in, and configure the site-specific settings."|t('cockpit'),
            id: 'sites',
            name: 'sites',
            cols: {
                heading: {
                    type: 'heading',
                    heading: "Site"|t('app'),
                    thin: true
                },
                enabled: {
                    type: 'heading',
                    thin: true,
                    class: not craft.app.getIsMultiSite() ? 'hidden'
                },
                uriFormat: {
                    type: 'singleline',
                    heading: "Matchfield URI Format"|t('cockpit'),
                    info: "What entry URIs should look like for the site. Leave blank if match fields don’t have URLs."|t('cockpit'),
                    placeholder: 'Leave blank if match fields don’t have URLs'|t('cockpit'),
                    code: true,
                    width: headlessMode ? 500,
                },
                template: not headlessMode ? {
                    type: 'template',
                    heading: "Template"|t('app'),
                    info: "Which template should be loaded when an match fields’ URL is requested."|t('cockpit'),
                    code: true
                },
                enabledByDefault: {
                    type: 'lightswitch',
                    heading: "Default Status"|t('app'),
                    thin: true,
                }
            }|filter,
            rows: siteRows,
            fullWidth: true,
            allowAdd: false,
            allowDelete: false,
            allowReorder: false,
            errors: siteErrors|unique,
            static: readOnly,
        }) }}

        {% if craft.app.getIsMultiSite() %}
            <div class="field type-channel type-structure">
                {{ forms.selectField({
                    label: 'Propagation Method'|t('app'),
                    instructions: 'Of the enabled sites above, which sites should match fields in this match field be saved to?'|t('cockpit'),
                    warning: matchField.id and matchField.propagationMethod.value != 'none' and matchField.siteSettings|length > 1 ? 'Changing this may result in data loss.'|t('app'),
                    id: 'propagationMethod',
                    name: 'propagationMethod',
                    options: [
                        { value: 'none', label: 'Only save entries to the site they were created in'|t('app') },
                        { value: 'siteGroup', label: 'Save entries to other sites in the same site group'|t('app') },
                        { value: 'language', label: 'Save entries to other sites with the same language'|t('app') },
                        { value: 'all', label: 'Save entries to all sites enabled for this match field'|t('cockpit') },
                        { value: 'custom', label: 'Let each entry choose which sites it should be saved to'|t('app') },
                    ],
                    value: matchField.propagationMethod.value,
                    disabled: readOnly,
                }) }}
            </div>
        {% endif %}

        <div class="field type-structure">
            {{ forms.textField({
                label: "Max Levels"|t('app'),
                instructions: 'The maximum number of levels this match field can have.'|t('cockpit'),
                id: 'maxLevels',
                name: 'maxLevels',
                value: matchField.maxLevels,
                size: 5,
                errors: matchField.getErrors('maxLevels'),
                disabled: readOnly,
            }) }}

            {{ forms.selectField({
                label: 'Default {type} Placement'|t('app', {type: 'Entry'|t('app')}),
                instructions: 'Where new {type} should be placed by default in the structure.'|t('app', {type: 'entries'|t('app')}),
                id: 'default-placement',
                name: 'defaultPlacement',
                options: [
                    {label: 'Before other {type}'|t('app', {type: 'match fields'|t('cockpit')}), value: 'beginning'},
                    {label: 'After other {type}'|t('app', {type: 'match fields'|t('cockpit')}), value: 'end'},
                ],
                value: matchField.defaultPlacement,
                disabled: readOnly,
            }) }}
        </div>

        {{ forms.editableTableField({
            label: 'Preview Targets'|t('app'),
            instructions: 'Locations that should be available for previewing entries in this match field.'|t('cockpit'),
            id: 'previewTargets',
            name: 'previewTargets',
            cols: {
                label: {
                    type: 'singleline',
                    heading: 'Label'|t('app'),
                },
                urlFormat: {
                    type: 'singleline',
                    heading: 'URL Format'|t('app'),
                    info: 'The URL/URI to use for this target.'|t('app'),
                    code: true,
                },
                refresh: {
                    type: 'checkbox',
                    heading: 'Auto-refresh'|t('app'),
                    info: 'Whether preview frames should be automatically refreshed when content changes.'|t('app'),
                    thin: true,
                }
            },
            defaultValues: {
                refresh: true,
            },
            allowAdd: true,
            allowReorder: true,
            allowDelete: true,
            rows: matchField.previewTargets,
            errors: matchField.getErrors('previewTargets'),
            static: readOnly,
        }) }}

        <hr>

        {{ forms.fieldLayoutDesignerField({
            fieldLayout: matchField.getFieldLayout(),
            withCardViewDesigner: true,
            disabled: readOnly,
        }) }}
    </div>
{% endblock %}

{% if brandNewMatchField %}
    {% js %}
        new Craft.HandleGenerator('#name', '#handle');

        {% for site in craft.app.sites.getAllSites() %}
            new Craft.UriFormatGenerator(
                '#name',
                '#sites tr[data-id="{{ site.handle }}"] textarea[name$="[singleUri]"]',
                { updateWhenHidden: true }
            );
            new Craft.UriFormatGenerator(
                '#name',
                '#sites tr[data-id="{{ site.handle }}"] textarea[name$="[uriFormat]"]',
                { suffix: '/{slug}', updateWhenHidden: true }
            );
            new Craft.UriFormatGenerator(
                '#name',
                '#sites tr[data-id="{{ site.handle }}"] input[name$="[template]"]',
                { suffix: '/_entry.twig', updateWhenHidden: true }
            );
        {% endfor %}
    {% endjs %}
{% endif %}
